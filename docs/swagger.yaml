basePath: /api/v1
definitions:
  api.createSecretRequest:
    properties:
      path:
        type: string
      ttl_seconds:
        type: integer
      value:
        type: string
    required:
    - path
    - value
    type: object
  api.createUserRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        minLength: 6
        type: string
    required:
    - email
    - name
    - password
    type: object
  api.getSecretResponse:
    properties:
      decrypted_value:
        type: string
      path:
        type: string
      version:
        type: integer
    type: object
  api.loginUserRequest:
    properties:
      email:
        type: string
      password:
        minLength: 6
        type: string
    required:
    - email
    - password
    type: object
  api.loginUserResponse:
    properties:
      access_token:
        type: string
      user:
        $ref: '#/definitions/api.userResponse'
    type: object
  api.rollbackSecretRequest:
    properties:
      version:
        type: integer
    required:
    - version
    type: object
  api.rollbackSecretResponse:
    properties:
      encrypted_value:
        items:
          type: integer
        type: array
      existing_version:
        type: integer
      new_version:
        type: integer
      nonce:
        items:
          type: integer
        type: array
      path:
        type: string
      to_version:
        type: integer
    type: object
  api.secretResponse:
    properties:
      encrypted_value:
        items:
          type: integer
        type: array
      nonce:
        items:
          type: integer
        type: array
      path:
        type: string
    type: object
  api.shareSecretRequest:
    properties:
      path:
        type: string
      permission:
        enum:
        - read
        - write
        type: string
      share_ttl_secs:
        type: integer
      target_email:
        type: string
    required:
    - path
    - permission
    - target_email
    type: object
  api.shareSecretResponse:
    properties:
      owner_email:
        type: string
      path:
        type: string
      permission:
        type: string
      success:
        type: boolean
      target_email:
        type: string
    type: object
  api.swaggerErrorResponse:
    properties:
      error:
        type: string
    type: object
  api.updateSecretRequest:
    properties:
      value:
        type: string
    required:
    - value
    type: object
  api.updateSecretResponse:
    properties:
      encrypted_value:
        items:
          type: integer
        type: array
      nonce:
        items:
          type: integer
        type: array
      path:
        type: string
      version:
        type: integer
    type: object
  api.userResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      name:
        type: string
    type: object
host: localhost:9090
info:
  contact:
    email: mishrayashaswikumar@gmail.com
    name: Yashaswi Kumar Mishra
  description: Secure secret management system in Go
  title: Vaultify API
  version: "1.0"
paths:
  /login:
    post:
      consumes:
      - application/json
      description: Verify credentials and return access token
      parameters:
      - description: Login credentials
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/api.loginUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.loginUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.swaggerErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.swaggerErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.swaggerErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.swaggerErrorResponse'
      summary: Log in a user
      tags:
      - Auth
  /secrets:
    post:
      consumes:
      - application/json
      description: Encrypts and stores a secret with optional TTL, linked to the authenticated
        user. The encrypted secret is signed with an HMAC signature to ensure integrity
        and prevent tampering.
      parameters:
      - description: Secret creation request
        in: body
        name: secret
        required: true
        schema:
          $ref: '#/definitions/api.createSecretRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.secretResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.swaggerErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.swaggerErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/api.swaggerErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.swaggerErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create a new secret
      tags:
      - Secrets
  /secrets/{path}:
    get:
      description: Fetches and decrypts the secret. If version is not specified, retrieves
        the latest. Verifies HMAC to ensure integrity.
      parameters:
      - description: Secret path
        in: path
        name: path
        required: true
        type: string
      - description: Secret version (optional)
        in: query
        name: version
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.getSecretResponse'
        "401":
          description: Unauthorized or HMAC verification failed
          schema:
            $ref: '#/definitions/api.swaggerErrorResponse'
        "404":
          description: Secret not found
          schema:
            $ref: '#/definitions/api.swaggerErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.swaggerErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Retrieve a secret by path and optional version
      tags:
      - Secrets
    put:
      consumes:
      - application/json
      description: Encrypts new secret value, verifies existing HMAC to prevent tampering,
        then creates a new secret version signed with a fresh HMAC.
      parameters:
      - description: Secret path
        in: path
        name: path
        required: true
        type: string
      - description: New secret value
        in: body
        name: updateSecretRequest
        required: true
        schema:
          $ref: '#/definitions/api.updateSecretRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.updateSecretResponse'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/api.swaggerErrorResponse'
        "401":
          description: Unauthorized or HMAC verification failed
          schema:
            $ref: '#/definitions/api.swaggerErrorResponse'
        "404":
          description: Secret not found
          schema:
            $ref: '#/definitions/api.swaggerErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.swaggerErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update an existing secret by creating a new version
      tags:
      - Secrets
  /secrets/{path}/rollback:
    post:
      consumes:
      - application/json
      description: Reverts a secret to a previous version by duplicating the selected
        version with a new version number. Verifies HMAC before proceeding.
      parameters:
      - description: Secret path
        in: path
        name: path
        required: true
        type: string
      - description: Rollback secret request payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.rollbackSecretRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.rollbackSecretResponse'
        "400":
          description: Invalid input or bad version
          schema:
            $ref: '#/definitions/api.swaggerErrorResponse'
        "401":
          description: 'Unauthorized: invalid HMAC or missing token'
          schema:
            $ref: '#/definitions/api.swaggerErrorResponse'
        "404":
          description: Secret version not found
          schema:
            $ref: '#/definitions/api.swaggerErrorResponse'
        "500":
          description: Internal server error during rollback
          schema:
            $ref: '#/definitions/api.swaggerErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Rollback secret to a previous version
      tags:
      - Secrets
  /secrets/share:
    post:
      consumes:
      - application/json
      description: Allows a user to share their secret with another user, specifying
        access permission and optional TTL. Verifies ownership before proceeding.
      parameters:
      - description: Secret share request payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.shareSecretRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.shareSecretResponse'
        "400":
          description: Invalid input or sharing with self
          schema:
            $ref: '#/definitions/api.swaggerErrorResponse'
        "401":
          description: 'Unauthorized: missing or invalid bearer token'
          schema:
            $ref: '#/definitions/api.swaggerErrorResponse'
        "403":
          description: 'Forbidden: not the secret owner'
          schema:
            $ref: '#/definitions/api.swaggerErrorResponse'
        "404":
          description: Secret or target user not found
          schema:
            $ref: '#/definitions/api.swaggerErrorResponse'
        "409":
          description: Secret already shared with target user
          schema:
            $ref: '#/definitions/api.swaggerErrorResponse'
        "500":
          description: Internal server error during sharing
          schema:
            $ref: '#/definitions/api.swaggerErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Share a secret with another user
      tags:
      - Secrets
  /sign-up:
    post:
      consumes:
      - application/json
      description: Create a new user with hashed password
      parameters:
      - description: User registration info
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/api.createUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.userResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.swaggerErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.swaggerErrorResponse'
      summary: Register a new user
      tags:
      - Auth
swagger: "2.0"
