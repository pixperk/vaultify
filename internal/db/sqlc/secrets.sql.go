// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: secrets.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createSecret = `-- name: CreateSecret :one
INSERT INTO secrets (user_id, path, encrypted_value, nonce)
VALUES ($1, $2, $3, $4)
RETURNING id, user_id, path, encrypted_value, nonce, created_at, updated_at
`

type CreateSecretParams struct {
	UserID         uuid.UUID `json:"user_id"`
	Path           string    `json:"path"`
	EncryptedValue []byte    `json:"encrypted_value"`
	Nonce          []byte    `json:"nonce"`
}

func (q *Queries) CreateSecret(ctx context.Context, arg CreateSecretParams) (Secrets, error) {
	row := q.db.QueryRowContext(ctx, createSecret,
		arg.UserID,
		arg.Path,
		arg.EncryptedValue,
		arg.Nonce,
	)
	var i Secrets
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Path,
		&i.EncryptedValue,
		&i.Nonce,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllSecretsForUser = `-- name: GetAllSecretsForUser :many
SELECT id, user_id, path, encrypted_value, nonce, created_at, updated_at FROM secrets WHERE user_id = $1
`

func (q *Queries) GetAllSecretsForUser(ctx context.Context, userID uuid.UUID) ([]Secrets, error) {
	rows, err := q.db.QueryContext(ctx, getAllSecretsForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Secrets{}
	for rows.Next() {
		var i Secrets
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Path,
			&i.EncryptedValue,
			&i.Nonce,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSecretByPath = `-- name: GetSecretByPath :one
SELECT id, user_id, path, encrypted_value, nonce, created_at, updated_at FROM secrets WHERE path = $1
`

func (q *Queries) GetSecretByPath(ctx context.Context, path string) (Secrets, error) {
	row := q.db.QueryRowContext(ctx, getSecretByPath, path)
	var i Secrets
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Path,
		&i.EncryptedValue,
		&i.Nonce,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
