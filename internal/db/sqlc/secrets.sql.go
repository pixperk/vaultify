// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: secrets.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createSecret = `-- name: CreateSecret :one
INSERT INTO secrets (user_id, path, encrypted_value, nonce, expires_at)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, user_id, path, encrypted_value, nonce, created_at, updated_at, expires_at
`

type CreateSecretParams struct {
	UserID         uuid.UUID    `json:"user_id"`
	Path           string       `json:"path"`
	EncryptedValue []byte       `json:"encrypted_value"`
	Nonce          []byte       `json:"nonce"`
	ExpiresAt      sql.NullTime `json:"expires_at"`
}

func (q *Queries) CreateSecret(ctx context.Context, arg CreateSecretParams) (Secrets, error) {
	row := q.db.QueryRowContext(ctx, createSecret,
		arg.UserID,
		arg.Path,
		arg.EncryptedValue,
		arg.Nonce,
		arg.ExpiresAt,
	)
	var i Secrets
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Path,
		&i.EncryptedValue,
		&i.Nonce,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const deleteExpiredSecrets = `-- name: DeleteExpiredSecrets :exec
DELETE FROM secrets
WHERE expires_at IS NOT NULL AND expires_at < now()
`

func (q *Queries) DeleteExpiredSecrets(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteExpiredSecrets)
	return err
}

const getAllSecretsForUser = `-- name: GetAllSecretsForUser :many
SELECT id, user_id, path, encrypted_value, nonce, created_at, updated_at, expires_at FROM secrets WHERE user_id = $1 AND (expires_at IS NULL OR expires_at > now())
`

func (q *Queries) GetAllSecretsForUser(ctx context.Context, userID uuid.UUID) ([]Secrets, error) {
	rows, err := q.db.QueryContext(ctx, getAllSecretsForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Secrets{}
	for rows.Next() {
		var i Secrets
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Path,
			&i.EncryptedValue,
			&i.Nonce,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ExpiresAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSecretByPath = `-- name: GetSecretByPath :one
SELECT id, user_id, path, encrypted_value, nonce, created_at, updated_at, expires_at FROM secrets WHERE path = $1 AND (expires_at IS NULL OR expires_at > now())
`

func (q *Queries) GetSecretByPath(ctx context.Context, path string) (Secrets, error) {
	row := q.db.QueryRowContext(ctx, getSecretByPath, path)
	var i Secrets
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Path,
		&i.EncryptedValue,
		&i.Nonce,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const updateSecret = `-- name: UpdateSecret :one
UPDATE secrets
SET encrypted_value = $2,
    nonce = $3,
    updated_at = NOW()
WHERE path = $1
RETURNING id, user_id, path, encrypted_value, nonce, created_at, updated_at, expires_at
`

type UpdateSecretParams struct {
	Path           string `json:"path"`
	EncryptedValue []byte `json:"encrypted_value"`
	Nonce          []byte `json:"nonce"`
}

func (q *Queries) UpdateSecret(ctx context.Context, arg UpdateSecretParams) (Secrets, error) {
	row := q.db.QueryRowContext(ctx, updateSecret, arg.Path, arg.EncryptedValue, arg.Nonce)
	var i Secrets
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Path,
		&i.EncryptedValue,
		&i.Nonce,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
	)
	return i, err
}
