// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: sharing_rule.sql

package db

import (
	"context"
)

const getPermissions = `-- name: GetPermissions :one
SELECT permission
FROM sharing_rules
WHERE path = $1 AND target_email = $2
`

type GetPermissionsParams struct {
	Path        string `json:"path"`
	TargetEmail string `json:"target_email"`
}

func (q *Queries) GetPermissions(ctx context.Context, arg GetPermissionsParams) (string, error) {
	row := q.db.QueryRowContext(ctx, getPermissions, arg.Path, arg.TargetEmail)
	var permission string
	err := row.Scan(&permission)
	return permission, err
}

const getSecretsSharedWithMe = `-- name: GetSecretsSharedWithMe :many
SELECT path, permission, owner_email
FROM sharing_rules
WHERE target_email = $1
`

type GetSecretsSharedWithMeRow struct {
	Path       string `json:"path"`
	Permission string `json:"permission"`
	OwnerEmail string `json:"owner_email"`
}

func (q *Queries) GetSecretsSharedWithMe(ctx context.Context, targetEmail string) ([]GetSecretsSharedWithMeRow, error) {
	rows, err := q.db.QueryContext(ctx, getSecretsSharedWithMe, targetEmail)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetSecretsSharedWithMeRow{}
	for rows.Next() {
		var i GetSecretsSharedWithMeRow
		if err := rows.Scan(&i.Path, &i.Permission, &i.OwnerEmail); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSharedWith = `-- name: GetSharedWith :many
SELECT owner_email, target_email 
FROM sharing_rules
WHERE path = $1
`

type GetSharedWithRow struct {
	OwnerEmail  string `json:"owner_email"`
	TargetEmail string `json:"target_email"`
}

func (q *Queries) GetSharedWith(ctx context.Context, path string) ([]GetSharedWithRow, error) {
	rows, err := q.db.QueryContext(ctx, getSharedWith, path)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetSharedWithRow{}
	for rows.Next() {
		var i GetSharedWithRow
		if err := rows.Scan(&i.OwnerEmail, &i.TargetEmail); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const shareSecret = `-- name: ShareSecret :one
INSERT INTO sharing_rules (owner_email, target_email, path, permission)
VALUES ($1, $2, $3, $4)
RETURNING id, owner_email, target_email, path, permission, created_at
`

type ShareSecretParams struct {
	OwnerEmail  string `json:"owner_email"`
	TargetEmail string `json:"target_email"`
	Path        string `json:"path"`
	Permission  string `json:"permission"`
}

func (q *Queries) ShareSecret(ctx context.Context, arg ShareSecretParams) (SharingRules, error) {
	row := q.db.QueryRowContext(ctx, shareSecret,
		arg.OwnerEmail,
		arg.TargetEmail,
		arg.Path,
		arg.Permission,
	)
	var i SharingRules
	err := row.Scan(
		&i.ID,
		&i.OwnerEmail,
		&i.TargetEmail,
		&i.Path,
		&i.Permission,
		&i.CreatedAt,
	)
	return i, err
}
